#include <iostream>
using namespace std;

// Constants
const int SIZE = 9;

// Function to print the Sudoku grid
void printGrid(int grid[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}

// Function to check if a number is already used in a row
bool isUsedInRow(int grid[SIZE][SIZE], int row, int num) {
    for (int col = 0; col < SIZE; col++) {
        if (grid[row][col] == num) {
            return true;
        }
    }
    return false;
}

// Function to check if a number is already used in a column
bool isUsedInCol(int grid[SIZE][SIZE], int col, int num) {
    for (int row = 0; row < SIZE; row++) {
        if (grid[row][col] == num) {
            return true;
        }
    }
    return false;
}

// Function to check if a number is already used in a 3x3 box
bool isUsedInBox(int grid[SIZE][SIZE], int startRow, int startCol, int num) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (grid[row + startRow][col + startCol] == num) {
                return true;
            }
        }
    }
    return false;
}

// Function to check if a number is safe to be placed at the given position
bool isSafe(int grid[SIZE][SIZE], int row, int col, int num) {
    return !isUsedInRow(grid, row, num) &&
           !isUsedInCol(grid, col, num) &&
           !isUsedInBox(grid, row - row % 3, col - col % 3, num);
}

// Function to find an empty cell in the Sudoku grid
bool findEmptyCell(int grid[SIZE][SIZE], int& row, int& col) {
    for (row = 0; row < SIZE; row++) {
        for (col = 0; col < SIZE; col++) {
            if (grid[row][col] == 0) {
                return true;
            }
        }
    }
    return false;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[SIZE][SIZE]) {
    int row, col;

    if (!findEmptyCell(grid, row, col)) {
        return true;  // Puzzle solved
    }

    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            if (solveSudoku(grid)) {
                return true;  // Puzzle solved
            }

            grid[row][col] = 0;  // Backtrack
        }
    }

    return false;  // No solution found
}

